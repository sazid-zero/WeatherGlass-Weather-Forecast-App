import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
// No local selectedCity state needed
import { useLocationState } from '@/hooks/use-location-state';
import { Button } from '@/components/ui/button';
import { motion } from 'framer-motion';
import { TrendingUp, Calendar, MapPin, Thermometer, Droplets, Wind } from 'lucide-react';
import { useWeatherStatistics } from '@/hooks/use-weather-statistics';
import { useLocationHistory } from '@/hooks/use-location-history';
import { useSettings } from '@/hooks/use-settings';
import { SearchBar } from '@/components/weather/SearchBar';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Skeleton } from '@/components/ui/skeleton';
import { useTranslation } from '@/lib/i18n';
export default function StatisticsPage() {
    const { getFavorites, getRecent } = useLocationHistory();
    const { settings } = useSettings();
    const { t } = useTranslation(settings.weather.language);
    const { locationState, setSelectedLocation, setCurrentLocation } = useLocationState();
    // Get available cities from location history
    const favoriteLocations = getFavorites();
    const recentLocations = getRecent(5);
    const allLocations = [...favoriteLocations, ...recentLocations.filter(loc => !favoriteLocations.find(fav => fav.id === loc.id))];
    // Use coordinates if current location, else use selected city name
    let statsLocation = null;
    let displayLocation = 'London';
    if (locationState.isCurrentLocation && locationState.coordinates) {
        statsLocation = locationState.coordinates;
        displayLocation = 'Current Location';
    }
    else if (locationState.selectedLocation) {
        statsLocation = locationState.selectedLocation;
        displayLocation = locationState.selectedLocation;
    }
    else if (allLocations.length > 0) {
        statsLocation = allLocations[0].name;
        displayLocation = allLocations[0].name;
    }
    else {
        statsLocation = 'London';
        displayLocation = 'London';
    }
    const { data: statsData, isLoading, error } = useWeatherStatistics(statsLocation);
    // When user selects a city, update the global selected location (syncs with home)
    const handleCitySearch = (city) => {
        setSelectedLocation(city);
    };
    return (_jsx("div", { className: "min-h-screen weather-gradient-bg", children: _jsxs("div", { className: "ml-24 p-6", children: [_jsx(motion.header, { className: "mb-8", initial: { opacity: 0, y: -20 }, animate: { opacity: 1, y: 0 }, transition: { duration: 0.5 }, children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsx("h1", { className: "text-3xl font-bold text-foreground mb-2", children: t('statistics') }), _jsxs("p", { className: "text-muted-foreground", children: ["Detailed analytics and trends for ", displayLocation] })] }), _jsxs("div", { className: "flex items-center gap-4", children: [allLocations.length > 0 && (_jsxs(Select, { value: displayLocation, onValueChange: setSelectedLocation, children: [_jsx(SelectTrigger, { className: "w-48", children: _jsx(SelectValue, { placeholder: "Select city" }) }), _jsx(SelectContent, { children: allLocations.map((location) => (_jsx(SelectItem, { value: location.name, children: _jsxs("div", { className: "flex items-center gap-2", children: [_jsx(MapPin, { className: "h-4 w-4" }), location.name, ", ", location.country] }) }, location.id))) })] })), _jsxs(Button, { variant: "outline", size: "sm", onClick: () => {
                                            if (navigator.geolocation) {
                                                navigator.geolocation.getCurrentPosition((position) => {
                                                    setCurrentLocation({
                                                        lat: position.coords.latitude,
                                                        lon: position.coords.longitude
                                                    });
                                                }, (error) => {
                                                    // Optionally show a toast or alert
                                                    console.error('Geolocation error:', error);
                                                });
                                            }
                                        }, className: "flex items-center gap-2 glass-card border-0 transition-all duration-200", children: [_jsx(MapPin, { className: "h-4 w-4" }), "Current Location"] }), _jsx(SearchBar, { onCitySearch: handleCitySearch })] })] }) }), isLoading ? (_jsx("div", { className: "grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-6 mb-8", children: [1, 2, 3, 4].map((index) => (_jsxs("div", { className: "glass-card rounded-3xl p-6", children: [_jsx(Skeleton, { className: "h-6 w-6 mb-4" }), _jsx(Skeleton, { className: "h-8 w-20 mb-2" }), _jsx(Skeleton, { className: "h-4 w-32 mb-3" }), _jsx(Skeleton, { className: "h-8 w-full" })] }, index))) })) : error ? (_jsxs("div", { className: "glass-card rounded-3xl p-8 mb-8 text-center", children: [_jsxs("p", { className: "text-muted-foreground", children: ["Failed to load weather statistics for ", displayLocation] }), _jsx("p", { className: "text-sm text-muted-foreground mt-2", children: "Please try a different city or check your connection" })] })) : statsData ? (_jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 xl:grid-cols-4 gap-6 mb-8", children: [_jsxs(motion.div, { className: "glass-card rounded-3xl p-6", initial: { opacity: 0, y: 20 }, animate: { opacity: 1, y: 0 }, transition: { duration: 0.5 }, whileHover: { scale: 1.02 }, children: [_jsxs("div", { className: "flex items-center justify-between mb-4", children: [_jsx(Thermometer, { className: "h-6 w-6 text-primary" }), _jsxs("div", { className: `flex items-center text-sm ${statsData.temperature.trend === 'up' ? 'text-green-500' :
                                                statsData.temperature.trend === 'down' ? 'text-red-500' : 'text-yellow-500'}`, children: [_jsx(TrendingUp, { className: `h-4 w-4 mr-1 ${statsData.temperature.trend === 'down' ? 'rotate-180' :
                                                        statsData.temperature.trend === 'stable' ? 'rotate-90' : ''}` }), statsData.temperature.current - statsData.temperature.average > 0 ? '+' : '', (statsData.temperature.current - statsData.temperature.average).toFixed(1), "\u00B0"] })] }), _jsxs("div", { className: "mb-3", children: [_jsxs("div", { className: "text-2xl font-bold text-foreground", children: [statsData.temperature.current, "\u00B0C"] }), _jsx("div", { className: "text-sm text-muted-foreground", children: "Average Temperature" })] }), _jsxs("div", { className: "text-xs text-muted-foreground", children: ["Min: ", statsData.temperature.min, "\u00B0 | Max: ", statsData.temperature.max, "\u00B0"] })] }), _jsxs(motion.div, { className: "glass-card rounded-3xl p-6", initial: { opacity: 0, y: 20 }, animate: { opacity: 1, y: 0 }, transition: { duration: 0.5, delay: 0.1 }, whileHover: { scale: 1.02 }, children: [_jsxs("div", { className: "flex items-center justify-between mb-4", children: [_jsx(Droplets, { className: "h-6 w-6 text-blue-500" }), _jsxs("div", { className: `flex items-center text-sm ${statsData.humidity.trend === 'up' ? 'text-green-500' :
                                                statsData.humidity.trend === 'down' ? 'text-red-500' : 'text-yellow-500'}`, children: [_jsx(TrendingUp, { className: `h-4 w-4 mr-1 ${statsData.humidity.trend === 'down' ? 'rotate-180' :
                                                        statsData.humidity.trend === 'stable' ? 'rotate-90' : ''}` }), statsData.humidity.current - statsData.humidity.average > 0 ? '+' : '', (statsData.humidity.current - statsData.humidity.average).toFixed(0), "%"] })] }), _jsxs("div", { className: "mb-3", children: [_jsxs("div", { className: "text-2xl font-bold text-foreground", children: [statsData.humidity.current, "%"] }), _jsx("div", { className: "text-sm text-muted-foreground", children: "Humidity Level" })] })] }), _jsxs(motion.div, { className: "glass-card rounded-3xl p-6", initial: { opacity: 0, y: 20 }, animate: { opacity: 1, y: 0 }, transition: { duration: 0.5, delay: 0.2 }, whileHover: { scale: 1.02 }, children: [_jsxs("div", { className: "flex items-center justify-between mb-4", children: [_jsx(Wind, { className: "h-6 w-6 text-green-500" }), _jsxs("div", { className: `flex items-center text-sm ${statsData.wind.trend === 'up' ? 'text-green-500' :
                                                statsData.wind.trend === 'down' ? 'text-red-500' : 'text-yellow-500'}`, children: [_jsx(TrendingUp, { className: `h-4 w-4 mr-1 ${statsData.wind.trend === 'down' ? 'rotate-180' :
                                                        statsData.wind.trend === 'stable' ? 'rotate-90' : ''}` }), statsData.wind.current - statsData.wind.average > 0 ? '+' : '', (statsData.wind.current - statsData.wind.average).toFixed(1)] })] }), _jsxs("div", { className: "mb-3", children: [_jsxs("div", { className: "text-2xl font-bold text-foreground", children: [statsData.wind.current, " m/s"] }), _jsx("div", { className: "text-sm text-muted-foreground", children: "Wind Speed" })] })] }), _jsxs(motion.div, { className: "glass-card rounded-3xl p-6", initial: { opacity: 0, y: 20 }, animate: { opacity: 1, y: 0 }, transition: { duration: 0.5, delay: 0.3 }, whileHover: { scale: 1.02 }, children: [_jsxs("div", { className: "flex items-center justify-between mb-4", children: [_jsx(Calendar, { className: "h-6 w-6 text-purple-500" }), _jsx("div", { className: "text-sm text-muted-foreground", children: "7 days" })] }), _jsxs("div", { className: "mb-3", children: [_jsx("div", { className: "text-2xl font-bold text-foreground", children: statsData.conditions.rainy }), _jsx("div", { className: "text-sm text-muted-foreground", children: "Rainy Days" })] }), _jsxs("div", { className: "text-xs text-muted-foreground", children: ["Sunny: ", statsData.conditions.sunny, " | Cloudy: ", statsData.conditions.cloudy] })] })] })) : null, statsData && (_jsxs(motion.section, { className: "glass-card rounded-3xl p-6 mb-8", initial: { opacity: 0, y: 20 }, animate: { opacity: 1, y: 0 }, transition: { duration: 0.5, delay: 0.5 }, children: [_jsx("h2", { className: "text-xl font-semibold text-foreground mb-6", children: "Weekly Overview" }), statsData.weeklyData.length > 0 ? (_jsx("div", { className: "grid grid-cols-7 gap-4", children: statsData.weeklyData.map((day, index) => (_jsxs(motion.div, { className: "text-center", initial: { opacity: 0, y: 10 }, animate: { opacity: 1, y: 0 }, transition: { duration: 0.3, delay: 0.7 + index * 0.1 }, children: [_jsx("div", { className: "text-sm text-muted-foreground mb-2", children: day.day }), _jsxs("div", { className: "bg-primary/20 rounded-lg p-3 mb-2", children: [_jsxs("div", { className: "text-lg font-bold text-foreground", children: [day.temp, "\u00B0"] }), _jsx("div", { className: "text-xs text-muted-foreground", children: "Temp" })] }), _jsxs("div", { className: "bg-blue-500/20 rounded-lg p-2 mb-2", children: [_jsxs("div", { className: "text-sm font-semibold text-foreground", children: [day.humidity, "%"] }), _jsx("div", { className: "text-xs text-muted-foreground", children: "Humidity" })] }), _jsxs("div", { className: "bg-green-500/20 rounded-lg p-2", children: [_jsx("div", { className: "text-sm font-semibold text-foreground", children: day.wind }), _jsx("div", { className: "text-xs text-muted-foreground", children: "Wind" })] })] }, day.day))) })) : (_jsxs("div", { className: "text-center text-muted-foreground py-8", children: [_jsx(Calendar, { className: "h-12 w-12 mx-auto mb-3 text-muted-foreground/50" }), _jsx("p", { children: "No weekly forecast data available" })] }))] })), statsData && (_jsxs("div", { className: "grid grid-cols-1 xl:grid-cols-2 gap-6", children: [_jsxs(motion.section, { className: "glass-card rounded-3xl p-6", initial: { opacity: 0, x: -20 }, animate: { opacity: 1, x: 0 }, transition: { duration: 0.5, delay: 0.8 }, children: [_jsx("h3", { className: "text-lg font-semibold text-foreground mb-4", children: "Temperature Trends" }), _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "text-muted-foreground", children: "Highest this week" }), _jsxs("span", { className: "font-semibold text-foreground", children: [statsData.temperature.max, "\u00B0C"] })] }), _jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "text-muted-foreground", children: "Lowest this week" }), _jsxs("span", { className: "font-semibold text-foreground", children: [statsData.temperature.min, "\u00B0C"] })] }), _jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "text-muted-foreground", children: "Average" }), _jsxs("span", { className: "font-semibold text-foreground", children: [statsData.temperature.average, "\u00B0C"] })] }), _jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "text-muted-foreground", children: "Current" }), _jsxs("span", { className: "font-semibold text-primary", children: [statsData.temperature.current, "\u00B0C"] })] })] })] }), _jsxs(motion.section, { className: "glass-card rounded-3xl p-6", initial: { opacity: 0, x: 20 }, animate: { opacity: 1, x: 0 }, transition: { duration: 0.5, delay: 0.9 }, children: [_jsx("h3", { className: "text-lg font-semibold text-foreground mb-4", children: "Weather Patterns" }), _jsxs("div", { className: "space-y-4", children: [_jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "text-muted-foreground", children: "Sunny days" }), _jsxs("span", { className: "font-semibold text-green-500", children: [statsData.conditions.sunny, " days"] })] }), _jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "text-muted-foreground", children: "Cloudy days" }), _jsxs("span", { className: "font-semibold text-yellow-500", children: [statsData.conditions.cloudy, " days"] })] }), _jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "text-muted-foreground", children: "Rainy days" }), _jsxs("span", { className: "font-semibold text-blue-500", children: [statsData.conditions.rainy, " days"] })] }), _jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "text-muted-foreground", children: "Stormy days" }), _jsxs("span", { className: "font-semibold text-purple-500", children: [statsData.conditions.stormy, " days"] })] })] })] })] }))] }) }));
}
